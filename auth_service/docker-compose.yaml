services:
  auth_api:
    image: auth_api_image
    build: .
    restart: always
    volumes:
      - .:/app
    env_file:
      - .env
    ports:
      - 0:8000
    command: gunicorn src.main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind $SERVICE_HOST:$SERVICE_PORT
    depends_on:
      auth_redis:
        condition: service_healthy
      auth_postgres:
        condition: service_healthy
    networks:
      - auth_network
    container_name: 'auth_api'

  auth_postgres:
    image: postgres:16.0
    ports:
      - "0:5432"
    volumes:
      - postgres_data_auth:/var/lib/postgresql/data/
    env_file:
      - .env
    healthcheck:
        test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -p ${POSTGRES_PORT}" ]
        interval: 5s
        timeout: 5s
        retries: 5
    networks:
      - auth_network
    container_name: 'auth_postgres'

  auth_redis:
    image: redis:7.2.5
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
    env_file:
      - .env
    ports:
      - 0:6379
    networks:
      - auth_network
    container_name: 'auth_redis'

  auth_nginx:
    image: nginx:1.19.2
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/configs:/etc/nginx/conf.d:ro
    depends_on:
      - auth_api
    ports:
      - "81:80"
    networks:
      - auth_network
    container_name: 'auth_nginx'

  auth_jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: auth_jaeger
    ports:
      - '6831:6831/udp'
      - '16686:16686'
    networks:
      - auth_network

volumes:
  postgres_data_auth:
  redis_data:

networks:
  auth_network:
    driver: bridge

#networks:
#  auth_network:
#    driver: bridge
#    ipam:
#      config:
#        - subnet: 172.16.57.0/24
#
